#!/usr/bin/env node

// Copyright Â© 2014 Intel Corporation. All rights reserved.
// Use  of this  source  code is  governed by  an Apache v2
// license that can be found in the LICENSE-APACHE-V2 file.

var Shell = require ("shelljs");
var Fs = require ('fs');
var Path = require ('path');
var iOSProject = require('../lib/iOSProject');
var PlatformBase = require('../lib/PlatformBase');

function log(msg) {
    if (typeof(msg) != 'undefined' && msg != null)
        console.log(msg);
}

function PlatformData(root_dir, packageId) {
    var application = {
        'packageId': packageId,
        'output': {
            'error': console.log,
            'warning': console.log,
            'log': console.log
        },
        'pkgPath': Path.join(root_dir, 'pkg'),
        'prjPath': Path.join(root_dir, 'prj'),
        'appPath': Path.join(root_dir, 'app')
    };
    return {
        'platformId': 'ios',
        'application': application
    };
}

if (process.argv.length < 3) {
    console.log("crosswalk-app-ios [create|build] [projectId]");
    return;
}

var cmd = process.argv[2];
if (cmd) {
    switch(cmd){
    case 'create':
        if (process.argv.length < 4) {
            console.log("Usage: crosswalk-app-ios create projectId");
            break;
        }
        var packageId = process.argv[3]
        var Project = iOSProject(PlatformBase,
                                 PlatformData(Path.join(Shell.pwd(), packageId),
                                              packageId));
        Project.generate(null, log);
        break;
    case 'build':
        var packageId = Path.basename(Shell.pwd());
        var Project = iOSProject(PlatformBase, PlatformData(Shell.pwd(), packageId));
        Project.build(null, null, log);
        break;
    default:
    };
} else {
    console.log("Command error!");
}
